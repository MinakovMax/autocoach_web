import os
import time
import requests

API_KEY = os.getenv("API_KEY")
BASE_URL = "https://speech2text.ru/api/recognitions"


def analyze_audio(file_path: str) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ speech2text.ru, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–º–µ–Ω–∞–º–∏ —Å–ø–∏–∫–µ—Ä–æ–≤.
    """
    if not API_KEY:
        raise Exception("API_KEY –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env")

    with open(file_path, 'rb') as f:
        files = {'file': f}
        data = {
            'lang': 'ru',
            'speakers': '2'
        }
        url = f'{BASE_URL}/task/file?api-key={API_KEY}'
        response = requests.post(url, files=files, data=data)

    if not response.ok:
        raise Exception(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {response.text}')

    task_id = response.json().get('id')
    if not task_id:
        raise Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å task_id –∏–∑ –æ—Ç–≤–µ—Ç–∞')

    status_url = f'{BASE_URL}/{task_id}?api-key={API_KEY}'
    while True:
        status_response = requests.get(status_url)
        if not status_response.ok:
            raise Exception(f'–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {status_response.text}')

        status_data = status_response.json()
        code = status_data.get('status', {}).get('code', 0)
        if code == 200:
            break
        elif code >= 500:
            raise Exception(f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {status_data.get("status", {}).get("description", "")}')
        else:
            time.sleep(10)

    result_url = f'{BASE_URL}/{task_id}/result/json?api-key={API_KEY}'
    result_response = requests.get(result_url)

    if not result_response.ok:
        raise Exception(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result_response.text}')

    result_data = result_response.json()
    return format_dialogue(result_data)


def format_dialogue(data: dict) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç chunks + speakers –≤ —á–∏—Ç–∞–µ–º—ã–π –¥–∏–∞–ª–æ–≥.
    """
    speaker_map = {s['id']: s['name'] for s in data.get('speakers', [])}
    
    lines = []
    for chunk in data.get('chunks', []):
        speaker_id = chunk.get('speaker')
        speaker_name = speaker_map.get(speaker_id, f'–°–ø–∏–∫–µ—Ä {speaker_id}')
        text = chunk.get('text', '').strip()
        if text:
            lines.append(f"{speaker_name}: {text}")

    return '\n'.join(lines)

import os
import time
import jwt
import requests
from dotenv import load_dotenv
from langchain_community.llms import YandexGPT

load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
service_account_id = os.getenv('service_account_id')
key_id = os.getenv('key_id')
private_key = os.getenv('private_key').replace('\\n', '\n')
catalog_id = os.getenv('catalog_id')

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ IAM —Ç–æ–∫–µ–Ω–∞
def get_iam_token():
    now = int(time.time())
    payload = {
        'aud': 'https://iam.api.cloud.yandex.net/iam/v1/tokens',
        'iss': service_account_id,
        'iat': now,
        'exp': now + 360  # —Ç–æ–∫–µ–Ω –∂–∏–≤—ë—Ç 6 –º–∏–Ω—É—Ç
    }

    encoded_token = jwt.encode(
        payload,
        private_key,
        algorithm='PS256',
        headers={'kid': key_id}
    )

    response = requests.post(
        'https://iam.api.cloud.yandex.net/iam/v1/tokens',
        headers={'Content-Type': 'application/json'},
        json={'jwt': encoded_token}
    )

    data = response.json()
    print("–û—Ç–≤–µ—Ç –æ—Ç Yandex:", data)
    return data['iamToken']

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
def generate_general(transcript: str) -> str:
    token = get_iam_token()

    llm = YandexGPT(
        model_uri=f"gpt://{catalog_id}/yandexgpt/latest",
        folder_id=catalog_id,
        iam_token=token,
        temperature=0.3,
        max_tokens=800,
    )

    prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –Ω–∞–ø–∏—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ–¥–∞–∂. –£–∫–∞–∂–∏, —á—Ç–æ –±—ã–ª–æ —Ö–æ—Ä–æ—à–æ, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∏ –¥–∞–π —Å–æ–≤–µ—Ç—ã.

–†–∞–∑–≥–æ–≤–æ—Ä:
{transcript}

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
1. –ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ —Ö–æ—Ä–æ—à–æ.
2. –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å.
3. –°–æ–≤–µ—Ç—ã –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
"""
    return llm.invoke(prompt)

def generate_motivation(transcript: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞.
    """
    token = get_iam_token()

    llm = YandexGPT(
        model_uri=f"gpt://{catalog_id}/yandexgpt/latest",
        folder_id=catalog_id,
        iam_token=token,
        temperature=0.4,
        max_tokens=800,
    )

    prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∫–æ—É—á –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —Å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –º—ã—à–ª–µ–Ω–∏–µ–º. –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∏–∞–ª–æ–≥–∞ –º–µ–∂–¥—É –ø—Ä–æ–¥–∞–≤—Ü–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º —Å–æ—Å—Ç–∞–≤—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞.

üîπ –°–¥–µ–ª–∞–π —É–ø–æ—Ä –Ω–∞ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ–±—â–µ–Ω–∏—è.  
üîπ –ü–æ–¥—á–µ—Ä–∫–Ω–∏ –º–æ–º–µ–Ω—Ç—ã, –≥–¥–µ –ø—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–æ—è–≤–∏–ª –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É, —ç–º–ø–∞—Ç–∏—é –∏–ª–∏ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å.  
üîπ –ó–∞–≤–µ—Ä—à–∏ —Ç–µ–∫—Å—Ç –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º –ø–æ—Å—ã–ª–æ–º, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä—è–¥–∏—Ç –µ–≥–æ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –µ–≥–æ —Ä–∞–±–æ—Ç—ã.

–ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –æ–±–æ–¥—Ä—è—é—â–∏–π —Ç–æ–Ω. –ù–µ –¥–∞–≤–∞–π –∫—Ä–∏—Ç–∏–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –ø–æ—Ö–≤–∞–ª–∞ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è.

–¢–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:
\"\"\"
{transcript}
\"\"\"
"""

    return llm.invoke(prompt)


def generate_growth(transcript: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Ç–æ—á–µ–∫ —Ä–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞.
    """
    token = get_iam_token()

    llm = YandexGPT(
        model_uri=f"gpt://{catalog_id}/yandexgpt/latest",
        folder_id=catalog_id,
        iam_token=token,
        temperature=0.4,
        max_tokens=800,
    )

    prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∏ –æ–±—É—á–µ–Ω–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É –ø—Ä–æ–¥–∞–≤—Ü–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –≤—ã–¥–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.

üîπ –£–∫–∞–∂–∏ –∫–ª—é—á–µ–≤—ã–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ —É–ø—É—â–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.  
üîπ –ü–æ–¥—á–µ—Ä–∫–Ω–∏ –º–æ–º–µ–Ω—Ç—ã, –≥–¥–µ –ø—Ä–æ–¥–∞–≤–µ—Ü –º–æ–≥ –±—ã –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ.  
üîπ –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —á—ë—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–æ–¥–∞–∂.

–ë—É–¥—å —á–µ—Å—Ç–µ–Ω, –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–µ–Ω. –¢–æ–Ω ‚Äî —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π, –Ω–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Ä–æ—Å—Ç –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ.

–¢–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:
\"\"\"
{transcript}
\"\"\"
"""

    return llm.invoke(prompt)

def generate_objection(transcript: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞.
    """
    token = get_iam_token()

    llm = YandexGPT(
        model_uri=f"gpt://{catalog_id}/yandexgpt/latest",
        folder_id=catalog_id,
        iam_token=token,
        temperature=0.4,
        max_tokens=800,
    )

    prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —Å –æ–ø—ã—Ç–æ–º –≤ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –¥–∏–∞–ª–æ–≥–∞ –º–µ–∂–¥—É –ø—Ä–æ–¥–∞–≤—Ü–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º.

üî∏ –í—ã—è–≤–∏ –∫–ª—é—á–µ–≤—ã–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ–∑–≤—É—á–∏–ª –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —è–≤–Ω–æ –Ω–µ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω—ã.  
üî∏ –û–ø—Ä–µ–¥–µ–ª–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç—Ä–∞–±–æ—Ç–∞–ª —ç—Ç–∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è.  
üî∏ –ü—Ä–µ–¥–ª–æ–∂–∏ 2‚Äì3 –≤–∞—Ä–∏–∞–Ω—Ç–∞, –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª–µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ.  
üî∏ –ò—Å–ø–æ–ª—å–∑—É–π –¥–µ–ª–æ–≤–æ–π, –æ–±—É—á–∞—é—â–∏–π —Ç–æ–Ω, –±–µ–∑ –∫—Ä–∏—Ç–∏–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ ‚Äî —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
1. –°–ø–∏—Å–æ–∫ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π.
2. –ö—Ä–∞—Ç–∫–∏–π —Ä–∞–∑–±–æ—Ä —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–∫—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞.
3. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.

–¢–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:
\"\"\"
{transcript}
\"\"\"
"""
    return llm.invoke(prompt)

